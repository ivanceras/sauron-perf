'use strict';

function _interopDefault (ex) { return (ex && (typeof ex === 'object') && 'default' in ex) ? ex['default'] : ex; }

var fileSize = _interopDefault(require('filesize'));
var boxen = _interopDefault(require('boxen'));
var colors = _interopDefault(require('colors'));
var merge = _interopDefault(require('lodash.merge'));
var gzip = _interopDefault(require('gzip-size'));
var terser = _interopDefault(require('terser'));

function _toConsumableArray(arr) {
  return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _nonIterableSpread();
}

function _arrayWithoutHoles(arr) {
  if (Array.isArray(arr)) {
    for (var i = 0, arr2 = new Array(arr.length); i < arr.length; i++) arr2[i] = arr[i];

    return arr2;
  }
}

function _iterableToArray(iter) {
  if (Symbol.iterator in Object(iter) || Object.prototype.toString.call(iter) === "[object Arguments]") return Array.from(iter);
}

function _nonIterableSpread() {
  throw new TypeError("Invalid attempt to spread non-iterable instance");
}

var brotli = require("brotli-size");

function render(opt, outputOptions, info) {
  var primaryColor = opt.theme === "dark" ? "green" : "black";
  var secondaryColor = opt.theme === "dark" ? "yellow" : "blue";
  var title = colors[primaryColor].bold;
  var value = colors[secondaryColor];
  var values = [].concat(_toConsumableArray(outputOptions.file ? ["".concat(title("Destination: ")).concat(value(outputOptions.file))] : info.fileName ? ["".concat(title("Bundle Name: "), " ").concat(value(info.fileName))] : []), ["".concat(title("Bundle Size: "), " ").concat(value(info.bundleSize))], _toConsumableArray(info.minSize ? ["".concat(title("Minified Size: "), " ").concat(value(info.minSize))] : []), _toConsumableArray(info.gzipSize ? ["".concat(title("Gzipped Size: "), " ").concat(value(info.gzipSize))] : []), _toConsumableArray(info.brotliSize ? ["".concat(title("Brotli size: ")).concat(value(info.brotliSize))] : []));
  return boxen(values.join("\n"), {
    padding: 1
  });
}

function filesize() {
  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var env = arguments.length > 1 ? arguments[1] : undefined;
  var defaultOptions = {
    format: {},
    theme: "dark",
    render: render,
    showGzippedSize: true,
    showBrotliSize: false,
    showMinifiedSize: true
  };
  var opts = merge({}, defaultOptions, options);

  if (options.render) {
    opts.render = options.render;
  }

  var getData = function getData(outputOptions, bundle) {
    var code = bundle.code,
        fileName = bundle.fileName;
    var info = {};
    info.fileName = fileName;
    info.bundleSize = fileSize(Buffer.byteLength(code), opts.format);
    info.brotliSize = opts.showBrotliSize ? fileSize(brotli.sync(code), opts.format) : "";

    if (opts.showMinifiedSize || opts.showGzippedSize) {
      var minifiedCode = terser.minify(code).code;
      info.minSize = opts.showMinifiedSize ? fileSize(minifiedCode.length, opts.format) : "";
      info.gzipSize = opts.showGzippedSize ? fileSize(gzip.sync(minifiedCode), opts.format) : "";
    }

    return opts.render(opts, outputOptions, info);
  };

  if (env === "test") {
    return getData;
  }

  return {
    name: "filesize",
    generateBundle: function generateBundle(outputOptions, bundle, isWrite) {
      Object.keys(bundle).map(function (fileName) {
        return bundle[fileName];
      }).filter(function (currentBundle) {
        return !currentBundle.isAsset;
      }).forEach(function (currentBundle) {
        console.log(getData(outputOptions, currentBundle));
      });
    }
  };
}

module.exports = filesize;
